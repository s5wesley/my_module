# Create the project directory
mkdir Jenkins-server-module
cd Jenkins-server-module

# Create files with content

# backend.tf
echo 'terraform {
  backend "s3" {
    bucket         = var.s3_bucket_name
    key            = "terraform/state"
    region         = var.region
    dynamodb_table = aws_dynamodb_table.terraform_locks.name  # Reference to the DynamoDB table
    encrypt        = true
  }
}' > backend.tf

# main.tf
echo 'provider "aws" {
  region = var.region
}

# Create VPC
resource "aws_vpc" "main_vpc" {
  cidr_block = var.vpc_cidr_block
  tags = {
    Name = "main_vpc"
  }
}

# Create Public Subnet
resource "aws_subnet" "public_subnet" {
  vpc_id               = aws_vpc.main_vpc.id
  cidr_block           = var.public_subnet_cidr
  map_public_ip_on_launch = true
  availability_zone    = var.public_az
  tags = {
    Name = "public_subnet"
  }
}

# Create Private Subnet
resource "aws_subnet" "private_subnet" {
  vpc_id               = aws_vpc.main_vpc.id
  cidr_block           = var.private_subnet_cidr
  map_public_ip_on_launch = false
  availability_zone    = var.private_az
  tags = {
    Name = "private_subnet"
  }
}

# Create Internet Gateway
resource "aws_internet_gateway" "igw" {
  vpc_id = aws_vpc.main_vpc.id
  tags = {
    Name = "main_igw"
  }
}

# Create Route Table for Public Subnet
resource "aws_route_table" "public_route_table" {
  vpc_id = aws_vpc.main_vpc.id
  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.igw.id
  }
  tags = {
    Name = "public_route_table"
  }
}

# Associate Route Table with Public Subnet
resource "aws_route_table_association" "public_rta" {
  subnet_id      = aws_subnet.public_subnet.id
  route_table_id = aws_route_table.public_route_table.id
}

# Create S3 Bucket for Terraform state
resource "aws_s3_bucket" "terraform_state_bucket" {
  bucket = var.s3_bucket_name
  acl    = "private"

  tags = {
    Name        = "Terraform State Bucket"
    Environment = "Dev"
  }
}

# Create DynamoDB table for state locking
resource "aws_dynamodb_table" "terraform_locks" {
  name         = "terraform-state-locks"
  billing_mode = "PAY_PER_REQUEST"
  attribute {
    name = "LockID"
    type = "S"
  }
}

# Create EC2 instance in the public subnet
resource "aws_instance" "jenkins_sonar_ec2" {
  ami               = var.ami_id
  instance_type     = var.instance_type
  subnet_id         = aws_subnet.public_subnet.id
  availability_zone = var.public_az
  security_groups   = [aws_security_group.ec2_sg.name]

  key_name = var.key_name  # Referencing the key_name variable

  user_data = file("install_scripts.sh") # Referencing the installation script

  tags = {
    Name = "Jenkins-SonarQube-EC2"
  }
}' > main.tf

# security_groups.tf
echo 'resource "aws_security_group" "ec2_sg" {
  vpc_id = aws_vpc.main_vpc.id

  ingress {
    from_port   = 8080
    to_port     = 8080
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 9000
    to_port     = 9000
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "ec2_security_group"
  }
}' > security_groups.tf

# install_scripts.sh
echo '#!/bin/bash

# Update and install required packages
apt update -y
apt install -y openjdk-17-jdk docker.io unzip wget

# Start Docker
systemctl start docker
systemctl enable docker

# Install Jenkins
wget -O /etc/apt/trusted.gpg.d/jenkins.gpg https://pkg.jenkins.io/debian/jenkins.io.key
echo "deb http://pkg.jenkins.io/debian-stable binary/" | tee /etc/apt/sources.list.d/jenkins.list
apt update -y
apt install -y jenkins
systemctl start jenkins
systemctl enable jenkins

# Install SonarQube
wget https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-9.2.4.zip
unzip sonarqube-9.2.4.zip -d /opt
cd /opt/sonarqube-9.2.4/bin/linux-x86-64
./sonar.sh start
' > install_scripts.sh

# outputs.tf
echo 'output "jenkins_url" {
  value = "http://${aws_instance.jenkins_sonar_ec2.public_ip}:8080"
}

output "sonarqube_url" {
  value = "http://${aws_instance.jenkins_sonar_ec2.public_ip}:9000"
}' > outputs.tf

# variables.tf
echo 'variable "region" {
  description = "AWS Region to deploy resources"
  default     = "us-east-1"
}

variable "s3_bucket_name" {
  description = "S3 bucket name for storing Terraform state"
  default     = "your-unique-bucket-name" # Replace with your desired bucket name
}

variable "ami_id" {
  description = "AMI ID for the EC2 instance"
  default     = "ami-08e4e35cccc6189f4"
}

variable "instance_type" {
  description = "EC2 instance type"
  default     = "t2.medium"
}

variable "key_name" {
  description = "Key name for the EC2 instance"
  type        = string
}

variable "vpc_cidr_block" {
  description = "CIDR block for the VPC"
  default     = "10.0.0.0/16"
}

variable "public_subnet_cidr" {
  description = "CIDR block for the public subnet"
  default     = "10.0.1.0/24"
}

variable "private_subnet_cidr" {
  description = "CIDR block for the private subnet"
  default     = "10.0.2.0/24"
}

variable "public_az" {
  description = "Availability Zone for the public subnet"
  default     = "us-east-1a"
}

variable "private_az" {
  description = "Availability Zone for the private subnet"
  default     = "us-east-1b"
}' > variables.tf

# terraform.tfvars
echo 's3_bucket_name = "your-unique-bucket-name"  # Ensure this is unique
key_name       = "s5wesley"
' > terraform.tfvars

# Make the install script executable
chmod +x install_scripts.sh
